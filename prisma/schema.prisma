datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  uuid         String         @id @default(value: uuid())
  id           String         @unique @db.VarChar(63)
  pw           String         @db.VarChar(255)
  nick         String         @unique @db.VarChar(63)
  broom        Int            @default(value: 0)
  createdAt    DateTime       @default(value: now())
  issueComment IssueComment[]
  Issue        Issue[]
  Solve        Solution[]
}

model Issue {
  id              Int            @id @default(value: autoincrement())
  user            User?          @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  userId          String?
  status          IssueStatus    @default(value: UNSOLVED)
  description     String         @default("") @db.LongText
  lat             Float          @default(0) @db.Double
  lng             Float          @default(0) @db.Double
  createdAt       DateTime       @default(value: now())
  issueComment    IssueComment[]
  image           IssueImage?
  category        IssueCategory? @relation(fields: [issueCategoryId], references: [id])
  issueCategoryId Int?
  solve           Solution[]
}

model Solution {
  id          Int         @id @default(value: autoincrement())
  user        User?       @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  userId      String?
  description String      @default("") @db.LongText
  lat         Float       @default(0) @db.Double
  lng         Float       @default(0) @db.Double
  createdAt   DateTime    @default(value: now())
  issue       Issue       @relation(fields: [issueId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  issueId     Int
  image       SolveImage?
}

model IssueComment {
  id        String         @id @default(value: uuid())
  issue     Issue          @relation(fields: [issueId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  issueId   Int
  user      User?          @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  userId    String?
  parent    IssueComment?  @relation("children", fields: [parentId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  parentId  String?
  children  IssueComment[] @relation("children")
  createdAt DateTime       @default(value: now())
}

model IssueImage {
  id          Int    @id @default(value: autoincrement())
  issue       Issue? @relation(fields: [issueId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  issueId     Int?   @unique
  format      String
  sourceName  String
  regularName String
  sourceSize  Int
  compdSize   Int
  location    String @db.LongText
}

model SolveImage {
  id          Int       @id @default(value: autoincrement())
  solve       Solution? @relation(fields: [solveId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  solveId     Int?      @unique
  format      String
  sourceName  String
  regularName String
  sourceSize  Int
  compdSize   Int
  location    String    @db.LongText
}

model IssueCategory {
  id    Int     @id @default(value: autoincrement())
  name  String  @unique
  Issue Issue[]
}

enum IssueStatus {
  UNSOLVED
  PENDING
  SOLVED
  REPORTED
}

enum FileType {
  UNKNOWN
  IMAGE
  FILE
}
